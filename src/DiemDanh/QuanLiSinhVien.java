/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DiemDanh;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author trana
 */
public class QuanLiSinhVien extends javax.swing.JPanel {
    
    /**
     * Creates new form QuanLiSuKien
     */
    
    
    public QuanLiSinhVien() {
        initComponents();
//        cbbNganh.setEnabled(false);
        clearTable();
        loadTable();
        spnK.setValue(40);
        txtMaT.setDocument(new LengthRestrictedDocument(10));
        System.out.println("QL SV");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblSV = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtMa = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtHoTen = new javax.swing.JTextField();
        btnTaoSV = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbbKhoa = new javax.swing.JComboBox<>();
        spnK = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtMaT = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cbbNganh = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtEM = new javax.swing.JTextField();
        txtTim = new javax.swing.JTextField();
        btnTim = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        btnImport = new javax.swing.JButton();
        btnSua1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(1000, 511));
        setMinimumSize(new java.awt.Dimension(1000, 511));
        setPreferredSize(new java.awt.Dimension(1000, 511));

        tblSV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mssv", "Họ tên", "Khoa", "Ngành", "Khóa", "Mã số thẻ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSV.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblSV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSVMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblSV);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(296, 353));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Mã số sinh viên:");
        jLabel1.setToolTipText("");

        txtMa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Họ tên:");

        txtHoTen.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnTaoSV.setBackground(new java.awt.Color(51, 153, 255));
        btnTaoSV.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnTaoSV.setForeground(new java.awt.Color(255, 255, 255));
        btnTaoSV.setText("Tạo sinh viên");
        btnTaoSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoSVActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Tạo Sinh Viên");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Khoa:");

        cbbKhoa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbbKhoa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Khoa Công nghệ", "Khoa Công nghệ TT-TT", "Khoa Khoa học Chính trị", "Khoa Khoa học Tự nhiên", "Khoa Khoa học Xã hội & Nhân văn", "Khoa Kinh tế", "Khoa Luật", "Khoa Môi trường & TNTN", "Khoa Nông nghiệp & SHƯD", "Khoa Ngoại ngữ", "Khoa Phát triển Nông thôn", "Khoa Sư phạm", "Khoa Thủy sản", "Viện NC&PTCNSH", "Viện NCPT ĐBSCL", "Bộ môn Giáo dục Thể chất" }));
        cbbKhoa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbKhoaItemStateChanged(evt);
            }
        });

        spnK.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Khóa:");
        jLabel6.setToolTipText("");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Mã số thẻ:");

        txtMaT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Ngành:");

        cbbNganh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbbNganh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Công nghệ kỹ thuật hóa học", "Công nghệ kỹ thuật hóa học (Chất lượng cao)", "Kỹ thuật điều khiển và tự động hóa", "Kỹ thuật điện tử, truyền thông", "Kỹ thuật điện, điện tử (Kỹ thuật điện)", "Kỹ thuật công trình thủy", "Kỹ thuật công trình xây dựng (XD Công trình thủy)", "Kỹ thuật công trình xây dựng (XD cầu đường)", "Kỹ thuật công trình xây dựng (XD dân dụng và CN)", "Kỹ thuật cơ - điện tử", "Kỹ thuật cơ khí (Cơ khí chế biến)", "Kỹ thuật cơ khí (Cơ khí chế tạo máy)", "Kỹ thuật cơ khí (Cơ khí giao thông)", "Kỹ thuật Máy tính", "Kỹ thuật vật liệu", "Kỹ thuật xây dựng công trình giao thông", "Quản lý công nghiệp" }));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Email:");

        txtEM.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtHoTen, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtMa)
                    .addComponent(txtEM, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtMaT)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbbNganh, 0, 1, Short.MAX_VALUE)
                            .addComponent(cbbKhoa, 0, 1, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnK, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addComponent(btnTaoSV, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbbKhoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cbbNganh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMaT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTaoSV)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel2)
                    .addContainerGap(346, Short.MAX_VALUE)))
        );

        txtTim.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTim.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTimFocusGained(evt);
            }
        });

        btnTim.setBackground(new java.awt.Color(51, 153, 255));
        btnTim.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnTim.setForeground(new java.awt.Color(255, 255, 255));
        btnTim.setText("Tìm kiếm");
        btnTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(51, 153, 255));
        btnSua.setForeground(new java.awt.Color(255, 255, 255));
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXoa.setBackground(new java.awt.Color(51, 153, 255));
        btnXoa.setForeground(new java.awt.Color(255, 255, 255));
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Import từ file");

        btnImport.setBackground(new java.awt.Color(51, 153, 255));
        btnImport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnImport.setForeground(new java.awt.Color(255, 255, 255));
        btnImport.setText("Import");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(btnImport)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImport)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        btnSua1.setBackground(new java.awt.Color(51, 153, 255));
        btnSua1.setForeground(new java.awt.Color(255, 255, 255));
        btnSua1.setText("Đăng ký thẻ");
        btnSua1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSua1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSua)
                        .addGap(14, 14, 14)
                        .addComponent(btnXoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSua1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtTim, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(btnTim))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTim)
                            .addComponent(btnSua)
                            .addComponent(btnXoa)
                            .addComponent(btnSua1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private boolean DD = false;
    private String MaSK;
    private boolean vao;
    DiemDanh dd;
    public void setDL(boolean DD, String MaSK, boolean vao) {
        this.DD = DD;
        this.MaSK = MaSK;
        this.vao = vao;
    }
    
    public void setPanel(DiemDanh dd){
            this.dd = dd;
    }
    
    public void loadDD(String MS, String RFID){
        txtMa.setText(MS);
        txtMaT.setText(RFID);
        txtMa.setEditable(false);
        txtMaT.setEditable(false);
    }
    SimpleDateFormat f = new SimpleDateFormat("HH:mm dd/MM/yyyy");
    java.util.Date date = new java.util.Date();
    SimpleDateFormat ff = new SimpleDateFormat("yyyy-MM-dd HH:mm");
    private void DiemDanh(){
        try {
            con = Connect.connect();
            Statement s = con.createStatement();
            String sql = "SELECT * FROM `sinhvien` where `MSSV` = '"+txtMa.getText()+"' ";
            ResultSet rs = s.executeQuery(sql);
            if(rs.next()){ 
                if(vao == true){
                    dd.loadTT(rs.getString("HoTenSV"), rs.getString("MSSV"), rs.getString("NganhHoc"), f.format(date), null, true,"vào");
                    dd.DDVao(txtMa.getText(), ff.format(date));
                }else{
                    dd.loadTT(rs.getString("HoTenSV"), rs.getString("MSSV"), rs.getString("NganhHoc"), null, f.format(date), true,"ra");
                    dd.DDRa(txtMa.getText(), ff.format(date));
                }
                JOptionPane.showMessageDialog(null, "Thêm sinh viên và điểm danh thành công");
                dd.txtID.setText("");
            }
            con.close();
            }catch (Exception ex) {
                ex.printStackTrace();
            }
    }
    
    private void nganhKhoa(){
        if(cbbKhoa.getSelectedItem().equals("Khoa Công nghệ")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Công nghệ kỹ thuật hóa học");
            cbbNganh.addItem("Công nghệ kỹ thuật hóa học (Chất lượng cao)");
            cbbNganh.addItem("Kỹ thuật điều khiển và tự động hóa");
            cbbNganh.addItem("Kỹ thuật điện tử, truyền thông");
            cbbNganh.addItem("Kỹ thuật điện, điện tử (Kỹ thuật điện)");
            cbbNganh.addItem("Kỹ thuật công trình thủy");
            cbbNganh.addItem("Kỹ thuật công trình xây dựng (XD Công trình thủy)");
            cbbNganh.addItem("Kỹ thuật công trình xây dựng (XD cầu đường)");
            cbbNganh.addItem("Kỹ thuật công trình xây dựng (XD dân dụng và CN)");
            cbbNganh.addItem("Kỹ thuật cơ - điện tử");
            cbbNganh.addItem("Kỹ thuật cơ khí (Cơ khí chế biến)");
            cbbNganh.addItem("Kỹ thuật cơ khí (Cơ khí chế tạo máy)");
            cbbNganh.addItem("Kỹ thuật cơ khí (Cơ khí giao thông)");
            cbbNganh.addItem(("Kỹ thuật Máy tính"));
            cbbNganh.addItem("Kỹ thuật vật liệu");
            cbbNganh.addItem("Kỹ thuật xây dựng công trình giao thông");
            cbbNganh.addItem("Quản lý công nghiệp");
        }else if(cbbKhoa.getSelectedItem().equals("Khoa Công nghệ TT-TT")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Công nghệ thông tin");
            cbbNganh.addItem("Công nghệ thông tin (Chât lượng cao)");
            cbbNganh.addItem("Công nghệ thông tin (Tin học ứng dụng)");
            cbbNganh.addItem("Hệ thống thông tin");
            cbbNganh.addItem("Kỹ thuật phần mềm");
            cbbNganh.addItem("Khoa học máy tính");
            cbbNganh.addItem("Truyền thông và Mạng máy tính");
        }else if(cbbKhoa.getSelectedItem().equals("Khoa Khoa học Chính trị")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Chính trị học");
            cbbNganh.addItem("Giáo dục công dân");
            cbbNganh.addItem("Triết học");
        }else if(cbbKhoa.getSelectedItem().equals("Khoa Khoa học Tự nhiên")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Hóa dược");
            cbbNganh.addItem("Hóa học");
            cbbNganh.addItem("Hóa học (Hóa dược)");
            cbbNganh.addItem("Sinh học");
            cbbNganh.addItem("Toán ứng dụng");
            cbbNganh.addItem("Vật lý kỹ thuật");
        }else if(cbbKhoa.getSelectedItem().equals("Khoa Khoa học Xã hội & Nhân văn")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Thông tin học");
            cbbNganh.addItem("Văn học");
            cbbNganh.addItem("Việt Nam học (Hướng dẫn viên du lịch)");
            cbbNganh.addItem("Xã hội học");
        }else if(cbbKhoa.getSelectedItem().equals("Khoa Kinh tế")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Kế toán");
            cbbNganh.addItem("Kiểm toán");
            cbbNganh.addItem("Kinh doanh quốc tế");
            cbbNganh.addItem("Kinh doanh quốc tế (Chất lượng cao)");
            cbbNganh.addItem("Kinh doanh thương mại");
            cbbNganh.addItem("Kinh tế");
            cbbNganh.addItem("Kinh tế nông nghiệp");
            cbbNganh.addItem("Kinh tế tài nguyên thiên nhiên");
            cbbNganh.addItem("Marketing");
            cbbNganh.addItem("Quản trị dịch vụ du lịch và lữ hành");
            cbbNganh.addItem("Quản trị kinh doanh");
            cbbNganh.addItem("Tài chính - Ngân hàng");
        }else if(cbbKhoa.getSelectedItem().equals("Khoa Luật")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Luật (Luật Hành chính)");
            cbbNganh.addItem("Luật (Luật Thương mại)");
            cbbNganh.addItem("Luật (Luật Tư pháp)");
        }else if(cbbKhoa.getSelectedItem().equals("Khoa Môi trường & TNTN")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Kỹ thuật môi trường");
            cbbNganh.addItem("Kỹ thuật tài nguyên nước");
            cbbNganh.addItem("Khoa học môi trường");
            cbbNganh.addItem("Lâm sinh"); 
            cbbNganh.addItem("Quản lý đất đai");
            cbbNganh.addItem("Quản lý tài nguyên và môi trường");
        }else if(cbbKhoa.getSelectedItem().equals("Khoa Nông nghiệp & SHƯD")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Bảo vệ thực vật");
            cbbNganh.addItem("Công nghệ rau hoa quả và cảnh quan");
            cbbNganh.addItem("Công nghệ sau thu hoạch");
            cbbNganh.addItem("Công nghệ thực phẩm");
            cbbNganh.addItem("Chăn nuôi");
            cbbNganh.addItem("Khoa học đất");
            cbbNganh.addItem("Khoa học cây trồng");
            cbbNganh.addItem("Khoa học cây trồng (Công nghệ giống cây trồng)");
            cbbNganh.addItem("Nông học");
            cbbNganh.addItem("Sinh học ứng dụng");
            cbbNganh.addItem("Thú y");
            cbbNganh.addItem("Thú y (Dược Thú y)");
        }else if(cbbKhoa.getSelectedItem().equals("Khoa Ngoại ngữ")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Ngôn ngữ Anh");
            cbbNganh.addItem("Ngôn ngữ Anh (Phiên dịch - Biên dịch tiếng Anh)");
            cbbNganh.addItem("Ngôn ngữ Pháp");
            cbbNganh.addItem("Sư Phạm Tiếng Anh");
            cbbNganh.addItem("Sư phạm Tiếng Pháp");
        }else if(cbbKhoa.getSelectedItem().equals("Khoa Phát triển Nông thôn")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Khuyến nông");
            cbbNganh.addItem("Kinh doanh nông nghiệp");
            cbbNganh.addItem("Nông học (Kỹ thuật nông nghiệp)");
        }else if(cbbKhoa.getSelectedItem().equals("Khoa Sư phạm")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Giáo dục Tiểu học");
            cbbNganh.addItem("Sư phạm Địa lý");
            cbbNganh.addItem("Sư phạm Hóa học");
            cbbNganh.addItem("Sư phạm Lịch sử");
            cbbNganh.addItem("Sư Phạm Ngữ Văn");
            cbbNganh.addItem("Sư phạm Sinh học");
            cbbNganh.addItem("Sư phạm Tin học");
            cbbNganh.addItem("Sư phạm Toán học");
            cbbNganh.addItem("Sư phạm Vật lý");
            cbbNganh.addItem("Sư phạm Vật lý (Vật lý - Tin học)");
        }else if(cbbKhoa.getSelectedItem().equals("Khoa Thủy sản")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Bệnh học thủy sản");
            cbbNganh.addItem("Công nghệ chế biến thủy sản");
            cbbNganh.addItem("Kinh tế nông nghiệp (Kinh tế thủy sản)");
            cbbNganh.addItem("Nuôi trồng thủy sản");
            cbbNganh.addItem("Nuôi trồng thủy sản (Chương trình tiên tiến)");
            cbbNganh.addItem("Quản lý nguồn lợi thủy sản");
        }else if(cbbKhoa.getSelectedItem().equals("Viện NC&PTCNSH")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Công nghệ Sinh học");
            cbbNganh.addItem("Công nghệ sinh học (Chương trình tiên tiến)");
            cbbNganh.addItem("Sinh học (Vi sinh vật học)");
        }else if(cbbKhoa.getSelectedItem().equals("Viện NCPT ĐBSCL")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Phát triển nông thôn");
        }else if(cbbKhoa.getSelectedItem().equals("Bộ môn Giáo dục Thể chất")){
            cbbNganh.removeAllItems();
            cbbNganh.addItem("Giáo dục thể chất");
        }
    }
        
    public static DefaultTableModel tableModel = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row, int column)
        {
            return false;
        }
    };
    private Connection con = null;
    public void loadTable(){
         try {
            con = Connect.connect();
            
            Statement s = con.createStatement();
            
            ResultSet rs = s.executeQuery("SELECT * FROM sinhvien");
            String []colsName = {"Mssv", "Họ tên","Email","Khoa","Ngành","Khóa","Mã số thẻ"};
            tableModel.setColumnIdentifiers(colsName); 
            tblSV.setModel(tableModel);
            while(rs.next()){ 
                Object rows[] = new Object[7];
                rows[0] = rs.getString(1);
                rows[1] = rs.getString(2);  
                rows[2] = rs.getString(3);
                rows[3] = rs.getString(6);
                rows[4] = rs.getString(5);
                rows[5] = rs.getString(7);
                rows[6] = rs.getString(4);
                tableModel.addRow(rows);
            }
            con.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    } 
    
  
    private void Them(){
            try {
            con = Connect.connect();
            Statement st = con.createStatement();
            String Ma = txtMa.getText();
            String HoTen = txtHoTen.getText();
            String Em = txtEM.getText();
            String Khoa = (String) cbbKhoa.getSelectedItem();
            String Nganh = (String) cbbNganh.getSelectedItem();
            String MaT = txtMaT.getText();
            int K =  (int) spnK.getValue();
            String SK = "insert into sinhvien  values('"+Ma+"','"+HoTen+"','"+Em+"','"+MaT+"','"+Nganh+"','"+Khoa+"',"+ K+")";
            st.executeUpdate(SK);
            con.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private void textRong(){
        txtEM.setText("");
        txtHoTen.setText("");
        txtMa.setText("");
        txtMaT.setText("");
        cbbKhoa.setSelectedIndex(0);
        cbbNganh.setSelectedIndex(0);
        spnK.setValue(40);
    }
    
    private void loadText(){
        int i = tblSV.getSelectedRow();
        Object Ma = tableModel.getValueAt(i, 0);
        Object HoTen = tableModel.getValueAt(i, 1);
        Object Em =  tableModel.getValueAt(i, 2);
        Object Khoa = tableModel.getValueAt(i, 3);
        Object Nganh = tableModel.getValueAt(i, 4);
        Object KK = tableModel.getValueAt(i, 5);
        Object MaT = tableModel.getValueAt(i, 6);
        String K = String.valueOf(KK);
        txtMa.setText((String) Ma);
        txtHoTen.setText((String) HoTen);
        txtEM.setText((String) Em);
        cbbKhoa.setSelectedItem(Khoa);
        cbbNganh.setSelectedItem(Nganh);
        spnK.setValue(Integer.parseInt(K));
        txtMaT.setText((String) MaT);
    }
    
    private void importSV(){
        Object[] list = new Object[7];
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".XLSX files", "xlsx");
        fileChooser.setFileFilter(filter);
        fileChooser.setAcceptAllFileFilterUsed(false);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File file = fileChooser.getSelectedFile();
            Vector cellVectorHolder = new Vector();
            try {
                List l = new ArrayList();
                // get file
                FileInputStream fis = new FileInputStream(file);
                // get the workbook from file
                XSSFWorkbook wb = new XSSFWorkbook(fis);
                // get the first sheet
                XSSFSheet dpSheet = wb.getSheetAt(0);
                // get row
                Iterator<Row> iterRow = dpSheet.rowIterator();
                
                while (iterRow.hasNext())
                {
                    Row r = iterRow.next();
                    // get cells in row
                    Iterator<Cell> iterCell = r.iterator();
                    
                    while (iterCell.hasNext())
                    {
                        Cell c = iterCell.next();
                        l.add(c);
                    }
                    cellVectorHolder.addElement(l);
                }
                
                for (int i = 0; i < l.size(); i++)
                {    
                    if(i%6==0){
                        list[0] = l.get(i);
                    }else if(i%6==1){
                        list[1] = l.get(i);
                    }else if(i%6==2){
                        list[2] = l.get(i);
                    }else if(i%6==3){
                        list[3] = l.get(i);
                    }else if(i%6==4){
                        list[4] = l.get(i);
                    }else if(i%6==5){
                        list[5] = l.get(i);
                    }
                    
                    if(i%6==5){
                        String sql = "select * from sinhvien where MSSV = ?";
                        try{
                        con = Connect.connect();
                        PreparedStatement pst = con.prepareStatement(sql);
                        pst.setString(1,(String.valueOf(list[0])));
                        ResultSet rs = pst.executeQuery();
                        if(rs.next()){
                            System.out.println("Mã sinh viên tồn tại "+list[0]);
                        }else{
                            try {
                            con = Connect.connect();
                            Statement st = con.createStatement();
                            String MaT = "";
                            String SK = "insert into sinhvien  values('"+list[0]+"','"+list[1]+"','"+list[2]+"','"+MaT+"','"+list[3]+"','"+list[4]+"',"+ list[5]+")";
                            st.executeUpdate(SK);
                            con.close();
                            clearTable();
                            loadTable();
                            JOptionPane.showMessageDialog(null, "Thành công");
                            } catch (Exception ex) {
                                    ex.printStackTrace();
                            }
                        }
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(null, "Kết nối cơ sở dũ liệu thất bại!! :(");
                        }
                        
                    }
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(QuanLiSinhVien.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(QuanLiSinhVien.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void cbbKhoaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbKhoaItemStateChanged
        nganhKhoa();
//        cbbNganh.setEnabled(true);
    }//GEN-LAST:event_cbbKhoaItemStateChanged

    String EMAIL_REGEX = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
    String NUMBER_REGEX = "^[0-9]+$";
    private void btnTaoSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoSVActionPerformed
        if(txtMa.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Mã sinh viên không được trống!");
        }else{
            if(txtHoTen.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Họ và tên sinh viên không được trống!");
            }else{
                if(txtEM.getText().equals("")){
                    JOptionPane.showMessageDialog(null, "Emal không được trống!");
                }else if(!txtEM.getText().matches(EMAIL_REGEX)){
                    JOptionPane.showMessageDialog(null, "Email không hợp lệ!");
                }else{
                String sql = "select * from sinhvien where MSSV = ?";
                try{
                   con = Connect.connect();
                   PreparedStatement pst = con.prepareStatement(sql);
                   pst.setString(1,txtMa.getText());
                   ResultSet rs = pst.executeQuery();
                   if(rs.next()){
                       JOptionPane.showMessageDialog(null, "Mã sinh viên đã tồn tại!!");
                   }else{
                       if(!txtMaT.getText().equals("")){
                           if(txtMaT.getText().matches(NUMBER_REGEX)){
                               String sql2 = "select * from sinhvien where MaRFID = ?";
                                try{
                                    con = Connect.connect();
                                    PreparedStatement pst2 = con.prepareStatement(sql2);
                                    pst2.setString(1,txtMaT.getText());

                                    ResultSet rs2 = pst2.executeQuery();
                                    if(rs2.next()){
                                        JOptionPane.showMessageDialog(null, "Mã RFID đã tồn tại!!");
                                    }else{
                                        String sql1 = "select * from canbo where MaRFID = ?";
                                        try{
                                            con = Connect.connect();
                                            PreparedStatement pst1 = con.prepareStatement(sql1);
                                            pst1.setString(1,txtMaT.getText());
                                            ResultSet rs1 = pst1.executeQuery();
                                            if(rs1.next()){
                                                JOptionPane.showMessageDialog(null, "Mã RFID đã tồn tại!!");
                                            }else{
                                                if(DD == false){
                                                    Them();
                                                    clearTable();
                                                    loadTable();
                                                    JOptionPane.showMessageDialog(null, "Thêm dữ liệu thành công!");
                                                    textRong();
                                                }else if(DD == true){
                                                    Them();
                                                    txtMa.setEditable(true);
                                                    txtMaT.setEditable(true);
                                                    this.setVisible(false);
                                                    dd.loadSK(MaSK);
                                                    clearTable();
                                                    loadTable();
                                                    dd.setVisible(true);
                                                    DD = false;
                                                    DiemDanh();
                                                }
                                            }
                                        }catch (Exception ex) {
                                             JOptionPane.showMessageDialog(null, "Kết nối cơ sở dũ liệu thất bại!! :(");
                                        }
                                    }
                                }catch (Exception ex) {
                                     JOptionPane.showMessageDialog(null, "Kết nối cơ sở dũ liệu thất bại!! :(");
                                }
                           }else{
                               JOptionPane.showMessageDialog(null, "Mã RFID không hợp lệ");
                           }
                       }else{
                            Them();
                            clearTable();
                            loadTable();
                            JOptionPane.showMessageDialog(null, "Thêm dữ liệu thành công!");
                            textRong();
                       }
                            
                   }
                            } catch (Exception ex) {
                                 JOptionPane.showMessageDialog(null, "Kết nối cơ sở dũ liệu thất bại!! :(");
                             }
                    
                }
            }
        }
    }//GEN-LAST:event_btnTaoSVActionPerformed

    private void Tim(){
        try {
            con = Connect.connect();
            Statement s = con.createStatement();
            String Search = txtTim.getText();
            String sql = "SELECT * FROM `sinhvien` where `MSSV` Like '%"+Search+"%' or `HoTenSV` Like '%"+Search+"%' or `Email` Like '%"+Search+"%' or `MaRFID` Like '%"+Search+"%' or `NganhHoc` Like '%"+Search+"%' or `Khoa` Like '%"+Search+"%' or `K` Like '%"+Search+"%'";
            ResultSet rs = s.executeQuery(sql);
            while(rs.next()){ 
                Object rows[] = new Object[7];
                rows[0] = rs.getString(1);
                rows[1] = rs.getString(2);  
                rows[2] = rs.getString(3);
                rows[3] = rs.getString(6);
                rows[4] = rs.getString(5);
                rows[5] = rs.getString(7);
                rows[6] = rs.getString(4);
                tableModel.addRow(rows);
            }
            con.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    
    private void Xoa(){
          try {
            con = Connect.connect();
            Statement st = con.createStatement();
            int i = tblSV.getSelectedRow();
            String Ma = (String) tableModel.getValueAt(i, 0);
            
            String Em = "Delete from sinhvien where MSSV ='"+Ma+"'";
            st.executeUpdate(Em);
            con.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
     }
    
    public void setTextDN(){
        txtEM.setText("");
        txtHoTen.setText("");
        cbbKhoa.setSelectedIndex(0);
        cbbNganh.setSelectedIndex(0);
        spnK.setValue(40);
    }

    private void tblSVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSVMouseClicked
        if(DD == true){
            System.out.println("Khong load text");
        }else{
            loadText();
        }
        
    }//GEN-LAST:event_tblSVMouseClicked

    private void txtTimFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTimFocusGained
        txtTim.setText("");
        clearTable();
        loadTable();
    }//GEN-LAST:event_txtTimFocusGained

    private void btnTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimActionPerformed
        if(txtTim.getText().equals("")){
           JOptionPane.showMessageDialog(null, "Tìm kiếm không được trống");
        }else{
            clearTable();
            Tim();
            int Count = tblSV.getRowCount();
            if(Count == 0){
                JOptionPane.showMessageDialog(null, "Không tìm được dữ liệu này!");
                clearTable();
            }else{
                clearTable();
                Tim();
                JOptionPane.showMessageDialog(null, "Tìm kiếm dữ liệu thành công!");
           }
       }
    }//GEN-LAST:event_btnTimActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        int i = tblSV.getSelectedRow();
        if(i == -1){
            JOptionPane.showMessageDialog(null, "Chọn dữ liệu trước khi xóa!");
        }else{
            int n = JOptionPane.showConfirmDialog(null,"Bạn chắc chắn muốn xóa?","THÔNG BÁO",JOptionPane.YES_NO_OPTION);
            if(n == JOptionPane.YES_OPTION){
                Xoa();
                JOptionPane.showMessageDialog(null, "Xóa dữ liệu thành công!");
                clearTable();
                loadTable();
                textRong();
            }else 
             return;
            } 
        
    }//GEN-LAST:event_btnXoaActionPerformed

    
     private void Sua(){
        int i = tblSV.getSelectedRow();
        Object Ma = tableModel.getValueAt(i, 0);
        Object HoTen = tableModel.getValueAt(i, 1);
        Object Em =  tableModel.getValueAt(i, 2);
        Object Khoa = tableModel.getValueAt(i, 3);
        Object Nganh = tableModel.getValueAt(i, 4);
        Object KK = tableModel.getValueAt(i, 5);
        Object MaT = tableModel.getValueAt(i, 6);
        String K = String.valueOf(KK);
        SuaTTSV s = new SuaTTSV();
        
        s.txtMa.setText((String) Ma);
        s.txtHoTen.setText((String) HoTen);
        s.txtEM.setText((String) Em);
        s.cbbKhoa.setSelectedItem(Khoa);
        s.cbbNganh.setSelectedItem(Nganh);
        s.spnK.setValue(Integer.parseInt(K));
        s.txtMaT.setText((String) MaT);
        s.setVisible(true);
    }
     
     public void clearTable(){
        int dem = tblSV.getRowCount();
        try{
        while (dem > 0 ){
            tableModel.removeRow(0);
        }
        }catch(java.lang.ArrayIndexOutOfBoundsException e){
            e.getMessage();
        }
    }
     
    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        int i = tblSV.getSelectedRow();
        if(i == -1){
            JOptionPane.showMessageDialog(null, "Chọn dữ liệu trước khi sửa!");
        }else{
            Sua();
            clearTable();
            loadTable();
            txtHoTen.setText("");
            txtMa.setText("");
            txtEM.setText("");
            txtMaT.setText("");
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        importSV();
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnSua1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSua1ActionPerformed
        int i = tblSV.getSelectedRow();
        Object Ma = tableModel.getValueAt(i, 0);
        Object MaT = tableModel.getValueAt(i, 6);
        if(i == -1){
            JOptionPane.showMessageDialog(null, "Chọn dữ liệu trước khi sửa!");
        }else{
            if(MaT.equals("")){
                CapNhatTheSV c = new CapNhatTheSV(this, (String) Ma);
                c.setVisible(true);
                System.out.println("Hiện form cập nhật thẻ");
            }else{
                JOptionPane.showMessageDialog(null, "Người này đã có RFID");
            }
            
       }
    }//GEN-LAST:event_btnSua1ActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnSua1;
    private javax.swing.JButton btnTaoSV;
    private javax.swing.JButton btnTim;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cbbKhoa;
    private javax.swing.JComboBox<String> cbbNganh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner spnK;
    private javax.swing.JTable tblSV;
    private javax.swing.JTextField txtEM;
    private javax.swing.JTextField txtHoTen;
    public javax.swing.JTextField txtMa;
    public javax.swing.JTextField txtMaT;
    private javax.swing.JTextField txtTim;
    // End of variables declaration//GEN-END:variables
}
